# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Builds android App"
  lane :build_android do
      gradle(task: 'clean')
      gradle(
        task: 'assemble',
        build_type: 'Release',
        properties: {
            "android.injected.signing.store.file" => ENV['KEYSTORE_PATH'],
            "android.injected.signing.store.password" => ENV['KEYSTORE_PASSWORD'],
            "android.injected.signing.key.alias" => ENV['KEY_ALIAS'],
            "android.injected.signing.key.password" => ENV['KEY_PASSWORD'],
        }
      )
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy_android do
    gradle(
        task: "clean bundleRelease",
        properties: {
            "android.injected.signing.store.file" => ENV['KEYSTORE_PATH'],
            "android.injected.signing.store.password" => ENV['KEYSTORE_PASSWORD'],
            "android.injected.signing.key.alias" => ENV['KEY_ALIAS'],
            "android.injected.signing.key.password" => ENV['KEY_PASSWORD'],
        }
    )
    upload_to_play_store
  end
end

platform :ios do
  desc "build app"
  lane :deploy_ios do
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"

    create_keychain({
        name: ENV["KEYCHAIN_NAME"],
        password: ENV["KEYCHAIN_PASSWORD"],
        timeout: 1800,
        default_keychain: true,
        unlock: true,
        lock_when_sleeps: false
    })

    app_store_connect_api_key(
        key_id: ENV["KEY_ID"],
        issuer_id: ENV["ISSUER_ID"],
        key_filepath: ENV["KEY_FILE_PATH"],
        duration: 1200, # optional (maximum 1200)
        in_house: false # optional but may be required if using match/sigh
    )

    sync_code_signing(
        type: "appstore",
        app_identifier: "com.blucky8649.brocallie",
        git_basic_authorization: ENV["GIT_BASIC_AUTH_64"],
        keychain_name: ENV["KEYCHAIN_NAME"],
        keychain_password: ENV["KEYCHAIN_PASSWORD"],
        readonly: true
    )

    sync_code_signing(
      type: "development",
       app_identifier: "com.blucky8649.brocallie",
       git_basic_authorization: ENV["GIT_BASIC_AUTH_64"],
       keychain_name: ENV["KEYCHAIN_NAME"],
       keychain_password: ENV["KEYCHAIN_PASSWORD"],
       readonly: true
    )
    match(
        storage_mode: "git",
        readonly: true,
        type: "appstore",
        git_basic_authorization: ENV["GIT_BASIC_AUTH_64"],
        keychain_name: ENV["KEYCHAIN_NAME"],
        keychain_password: ENV["KEYCHAIN_PASSWORD"],
        app_identifier: "com.blucky8649.brocallie"
    )

    build_app(
        scheme: "iosApp",
        project: "iosApp/iosApp.xcodeproj",
        clean: true,
        configuration: "Release",
        output_name: "brocallie_release.ipa",
    )

    deliver(
        submit_for_review: false,
        automatic_release: false,
        force: true, # Skip HTMl report verification
        skip_metadata: true,
        skip_screenshots: true,
        skip_binary_upload: true,
        precheck_include_in_app_purchases: false
      )

    slack(
        username: "[Bot]Brocallie",
        message: "Brocallie Test Flight 업로드 성공",
        icon_url: "https://play-lh.googleusercontent.com/nsjPtqj6NFafABkEfBXm6L0NRRCeJ808K_VESa-z79l3s-h_QM0jidFOFkzw5GTjj3o=s96-rw",
        slack_url: ENV["HOOK_URL"],
        fail_on_error: true
    )
  end
end